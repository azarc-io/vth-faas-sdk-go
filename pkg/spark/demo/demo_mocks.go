// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/spark/demo/demo.go

// Package demo is a generated GoMock package.
package demo

import (
	reflect "reflect"

	v1 "github.com/azarc-io/vth-faas-sdk-go/pkg/api/spark/v1"
	spark "github.com/azarc-io/vth-faas-sdk-go/pkg/spark"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckoutService is a mock of CheckoutService interface.
type MockCheckoutService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckoutServiceMockRecorder
}

// MockCheckoutServiceMockRecorder is the mock recorder for MockCheckoutService.
type MockCheckoutServiceMockRecorder struct {
	mock *MockCheckoutService
}

// NewMockCheckoutService creates a new mock instance.
func NewMockCheckoutService(ctrl *gomock.Controller) *MockCheckoutService {
	mock := &MockCheckoutService{ctrl: ctrl}
	mock.recorder = &MockCheckoutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckoutService) EXPECT() *MockCheckoutServiceMockRecorder {
	return m.recorder
}

// CancelPaymentTransaction mocks base method.
func (m *MockCheckoutService) CancelPaymentTransaction() v1.StageDefinitionFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPaymentTransaction")
	ret0, _ := ret[0].(v1.StageDefinitionFn)
	return ret0
}

// CancelPaymentTransaction indicates an expected call of CancelPaymentTransaction.
func (mr *MockCheckoutServiceMockRecorder) CancelPaymentTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPaymentTransaction", reflect.TypeOf((*MockCheckoutService)(nil).CancelPaymentTransaction))
}

// ConfirmPaymentTransaction mocks base method.
func (m *MockCheckoutService) ConfirmPaymentTransaction() v1.CompleteDefinitionFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPaymentTransaction")
	ret0, _ := ret[0].(v1.CompleteDefinitionFn)
	return ret0
}

// ConfirmPaymentTransaction indicates an expected call of ConfirmPaymentTransaction.
func (mr *MockCheckoutServiceMockRecorder) ConfirmPaymentTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPaymentTransaction", reflect.TypeOf((*MockCheckoutService)(nil).ConfirmPaymentTransaction))
}

// CreateTransaction mocks base method.
func (m *MockCheckoutService) CreateTransaction() v1.StageDefinitionFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction")
	ret0, _ := ret[0].(v1.StageDefinitionFn)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockCheckoutServiceMockRecorder) CreateTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockCheckoutService)(nil).CreateTransaction))
}

// ReserveInventoryItems mocks base method.
func (m *MockCheckoutService) ReserveInventoryItems() v1.StageDefinitionFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveInventoryItems")
	ret0, _ := ret[0].(v1.StageDefinitionFn)
	return ret0
}

// ReserveInventoryItems indicates an expected call of ReserveInventoryItems.
func (mr *MockCheckoutServiceMockRecorder) ReserveInventoryItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveInventoryItems", reflect.TypeOf((*MockCheckoutService)(nil).ReserveInventoryItems))
}

// RestoreInventoryItems mocks base method.
func (m *MockCheckoutService) RestoreInventoryItems() v1.StageDefinitionFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreInventoryItems")
	ret0, _ := ret[0].(v1.StageDefinitionFn)
	return ret0
}

// RestoreInventoryItems indicates an expected call of RestoreInventoryItems.
func (mr *MockCheckoutServiceMockRecorder) RestoreInventoryItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreInventoryItems", reflect.TypeOf((*MockCheckoutService)(nil).RestoreInventoryItems))
}

// SendApologiesEmail mocks base method.
func (m *MockCheckoutService) SendApologiesEmail() v1.StageDefinitionFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendApologiesEmail")
	ret0, _ := ret[0].(v1.StageDefinitionFn)
	return ret0
}

// SendApologiesEmail indicates an expected call of SendApologiesEmail.
func (mr *MockCheckoutServiceMockRecorder) SendApologiesEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendApologiesEmail", reflect.TypeOf((*MockCheckoutService)(nil).SendApologiesEmail))
}

// SendCancelEmail mocks base method.
func (m *MockCheckoutService) SendCancelEmail() v1.StageDefinitionFn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCancelEmail")
	ret0, _ := ret[0].(v1.StageDefinitionFn)
	return ret0
}

// SendCancelEmail indicates an expected call of SendCancelEmail.
func (mr *MockCheckoutServiceMockRecorder) SendCancelEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCancelEmail", reflect.TypeOf((*MockCheckoutService)(nil).SendCancelEmail))
}

// Spark mocks base method.
func (m *MockCheckoutService) Spark() (*spark.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spark")
	ret0, _ := ret[0].(*spark.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spark indicates an expected call of Spark.
func (mr *MockCheckoutServiceMockRecorder) Spark() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spark", reflect.TypeOf((*MockCheckoutService)(nil).Spark))
}

// MockPaymentProvider is a mock of PaymentProvider interface.
type MockPaymentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProviderMockRecorder
}

// MockPaymentProviderMockRecorder is the mock recorder for MockPaymentProvider.
type MockPaymentProviderMockRecorder struct {
	mock *MockPaymentProvider
}

// NewMockPaymentProvider creates a new mock instance.
func NewMockPaymentProvider(ctrl *gomock.Controller) *MockPaymentProvider {
	mock := &MockPaymentProvider{ctrl: ctrl}
	mock.recorder = &MockPaymentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProvider) EXPECT() *MockPaymentProviderMockRecorder {
	return m.recorder
}

// CancelTransaction mocks base method.
func (m *MockPaymentProvider) CancelTransaction(transaction Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTransaction indicates an expected call of CancelTransaction.
func (mr *MockPaymentProviderMockRecorder) CancelTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTransaction", reflect.TypeOf((*MockPaymentProvider)(nil).CancelTransaction), transaction)
}

// ConfirmTransaction mocks base method.
func (m *MockPaymentProvider) ConfirmTransaction(transaction Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmTransaction indicates an expected call of ConfirmTransaction.
func (mr *MockPaymentProviderMockRecorder) ConfirmTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmTransaction", reflect.TypeOf((*MockPaymentProvider)(nil).ConfirmTransaction), transaction)
}

// CreateTransaction mocks base method.
func (m *MockPaymentProvider) CreateTransaction(transaction Transaction) (Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction)
	ret0, _ := ret[0].(Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockPaymentProviderMockRecorder) CreateTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockPaymentProvider)(nil).CreateTransaction), transaction)
}

// MockInventoryManagementService is a mock of InventoryManagementService interface.
type MockInventoryManagementService struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryManagementServiceMockRecorder
}

// MockInventoryManagementServiceMockRecorder is the mock recorder for MockInventoryManagementService.
type MockInventoryManagementServiceMockRecorder struct {
	mock *MockInventoryManagementService
}

// NewMockInventoryManagementService creates a new mock instance.
func NewMockInventoryManagementService(ctrl *gomock.Controller) *MockInventoryManagementService {
	mock := &MockInventoryManagementService{ctrl: ctrl}
	mock.recorder = &MockInventoryManagementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryManagementService) EXPECT() *MockInventoryManagementServiceMockRecorder {
	return m.recorder
}

// Reserve mocks base method.
func (m *MockInventoryManagementService) Reserve(inventoryItem []InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", inventoryItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reserve indicates an expected call of Reserve.
func (mr *MockInventoryManagementServiceMockRecorder) Reserve(inventoryItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockInventoryManagementService)(nil).Reserve), inventoryItem)
}

// RestoreAvailability mocks base method.
func (m *MockInventoryManagementService) RestoreAvailability(inventoryItem []InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAvailability", inventoryItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreAvailability indicates an expected call of RestoreAvailability.
func (mr *MockInventoryManagementServiceMockRecorder) RestoreAvailability(inventoryItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAvailability", reflect.TypeOf((*MockInventoryManagementService)(nil).RestoreAvailability), inventoryItem)
}

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// Cancellation mocks base method.
func (m *MockMailer) Cancellation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancellation")
}

// Cancellation indicates an expected call of Cancellation.
func (mr *MockMailerMockRecorder) Cancellation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancellation", reflect.TypeOf((*MockMailer)(nil).Cancellation))
}

// Confirmation mocks base method.
func (m *MockMailer) Confirmation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Confirmation")
}

// Confirmation indicates an expected call of Confirmation.
func (mr *MockMailerMockRecorder) Confirmation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirmation", reflect.TypeOf((*MockMailer)(nil).Confirmation))
}

// SomethingBadHappened mocks base method.
func (m *MockMailer) SomethingBadHappened() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SomethingBadHappened")
}

// SomethingBadHappened indicates an expected call of SomethingBadHappened.
func (mr *MockMailerMockRecorder) SomethingBadHappened() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SomethingBadHappened", reflect.TypeOf((*MockMailer)(nil).SomethingBadHappened))
}
