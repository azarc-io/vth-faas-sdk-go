// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azarc-io/vth-faas-sdk-go/pkg/spark/v1 (interfaces: StageProgressHandler)

// Package spark_v1_mock is a generated GoMock package.
package spark_v1_mock

import (
	reflect "reflect"

	sparkv1 "github.com/azarc-io/vth-faas-sdk-go/internal/gen/azarc/sdk/spark/v1"
	spark_v1 "github.com/azarc-io/vth-faas-sdk-go/pkg/spark/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockStageProgressHandler is a mock of StageProgressHandler interface.
type MockStageProgressHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStageProgressHandlerMockRecorder
}

// MockStageProgressHandlerMockRecorder is the mock recorder for MockStageProgressHandler.
type MockStageProgressHandlerMockRecorder struct {
	mock *MockStageProgressHandler
}

// NewMockStageProgressHandler creates a new mock instance.
func NewMockStageProgressHandler(ctrl *gomock.Controller) *MockStageProgressHandler {
	mock := &MockStageProgressHandler{ctrl: ctrl}
	mock.recorder = &MockStageProgressHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStageProgressHandler) EXPECT() *MockStageProgressHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStageProgressHandler) Get(arg0, arg1 string) (*sparkv1.StageStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*sparkv1.StageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStageProgressHandlerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStageProgressHandler)(nil).Get), arg0, arg1)
}

// GetResult mocks base method.
func (m *MockStageProgressHandler) GetResult(arg0, arg1 string) spark_v1.Bindable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult", arg0, arg1)
	ret0, _ := ret[0].(spark_v1.Bindable)
	return ret0
}

// GetResult indicates an expected call of GetResult.
func (mr *MockStageProgressHandlerMockRecorder) GetResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockStageProgressHandler)(nil).GetResult), arg0, arg1)
}

// Set mocks base method.
func (m *MockStageProgressHandler) Set(arg0 *sparkv1.SetStageStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStageProgressHandlerMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStageProgressHandler)(nil).Set), arg0)
}

// SetResult mocks base method.
func (m *MockStageProgressHandler) SetResult(arg0 *sparkv1.SetStageResultRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResult", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetResult indicates an expected call of SetResult.
func (mr *MockStageProgressHandlerMockRecorder) SetResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResult", reflect.TypeOf((*MockStageProgressHandler)(nil).SetResult), arg0)
}
