// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1 (interfaces: StartContext)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connectorv1 "github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockStartContext is a mock of StartContext interface.
type MockStartContext struct {
	ctrl     *gomock.Controller
	recorder *MockStartContextMockRecorder
}

// MockStartContextMockRecorder is the mock recorder for MockStartContext.
type MockStartContextMockRecorder struct {
	mock *MockStartContext
}

// NewMockStartContext creates a new mock instance.
func NewMockStartContext(ctrl *gomock.Controller) *MockStartContext {
	mock := &MockStartContext{ctrl: ctrl}
	mock.recorder = &MockStartContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartContext) EXPECT() *MockStartContextMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockStartContext) Config() connectorv1.Bindable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(connectorv1.Bindable)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockStartContextMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockStartContext)(nil).Config))
}

// Forwarder mocks base method.
func (m *MockStartContext) Forwarder() connectorv1.Forwarder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forwarder")
	ret0, _ := ret[0].(connectorv1.Forwarder)
	return ret0
}

// Forwarder indicates an expected call of Forwarder.
func (mr *MockStartContextMockRecorder) Forwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forwarder", reflect.TypeOf((*MockStartContext)(nil).Forwarder))
}

// InboundDescriptors mocks base method.
func (m *MockStartContext) InboundDescriptors() []connectorv1.InboundDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InboundDescriptors")
	ret0, _ := ret[0].([]connectorv1.InboundDescriptor)
	return ret0
}

// InboundDescriptors indicates an expected call of InboundDescriptors.
func (mr *MockStartContextMockRecorder) InboundDescriptors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InboundDescriptors", reflect.TypeOf((*MockStartContext)(nil).InboundDescriptors))
}

// Ingress mocks base method.
func (m *MockStartContext) Ingress(arg0 string) (connectorv1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingress", arg0)
	ret0, _ := ret[0].(connectorv1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ingress indicates an expected call of Ingress.
func (mr *MockStartContextMockRecorder) Ingress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingress", reflect.TypeOf((*MockStartContext)(nil).Ingress), arg0)
}

// Log mocks base method.
func (m *MockStartContext) Log() connectorv1.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(connectorv1.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockStartContextMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockStartContext)(nil).Log))
}

// OutboundDescriptors mocks base method.
func (m *MockStartContext) OutboundDescriptors() []connectorv1.OutboundDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutboundDescriptors")
	ret0, _ := ret[0].([]connectorv1.OutboundDescriptor)
	return ret0
}

// OutboundDescriptors indicates an expected call of OutboundDescriptors.
func (mr *MockStartContextMockRecorder) OutboundDescriptors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutboundDescriptors", reflect.TypeOf((*MockStartContext)(nil).OutboundDescriptors))
}

// RegisterPeriodicHealthCheck mocks base method.
func (m *MockStartContext) RegisterPeriodicHealthCheck(arg0 string, arg1 connectorv1.HealthCheckFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterPeriodicHealthCheck", arg0, arg1)
}

// RegisterPeriodicHealthCheck indicates an expected call of RegisterPeriodicHealthCheck.
func (mr *MockStartContextMockRecorder) RegisterPeriodicHealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPeriodicHealthCheck", reflect.TypeOf((*MockStartContext)(nil).RegisterPeriodicHealthCheck), arg0, arg1)
}
