// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1 (interfaces: OutboundDescriptor)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connectorv1 "github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockOutboundDescriptor is a mock of OutboundDescriptor interface.
type MockOutboundDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockOutboundDescriptorMockRecorder
}

// MockOutboundDescriptorMockRecorder is the mock recorder for MockOutboundDescriptor.
type MockOutboundDescriptorMockRecorder struct {
	mock *MockOutboundDescriptor
}

// NewMockOutboundDescriptor creates a new mock instance.
func NewMockOutboundDescriptor(ctrl *gomock.Controller) *MockOutboundDescriptor {
	mock := &MockOutboundDescriptor{ctrl: ctrl}
	mock.recorder = &MockOutboundDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboundDescriptor) EXPECT() *MockOutboundDescriptorMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockOutboundDescriptor) Config() connectorv1.Bindable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(connectorv1.Bindable)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockOutboundDescriptorMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockOutboundDescriptor)(nil).Config))
}

// MessageName mocks base method.
func (m *MockOutboundDescriptor) MessageName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MessageName indicates an expected call of MessageName.
func (mr *MockOutboundDescriptorMockRecorder) MessageName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageName", reflect.TypeOf((*MockOutboundDescriptor)(nil).MessageName))
}

// MessageType mocks base method.
func (m *MockOutboundDescriptor) MessageType() connectorv1.MessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageType")
	ret0, _ := ret[0].(connectorv1.MessageType)
	return ret0
}

// MessageType indicates an expected call of MessageType.
func (mr *MockOutboundDescriptorMockRecorder) MessageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageType", reflect.TypeOf((*MockOutboundDescriptor)(nil).MessageType))
}

// MimeType mocks base method.
func (m *MockOutboundDescriptor) MimeType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MimeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// MimeType indicates an expected call of MimeType.
func (mr *MockOutboundDescriptorMockRecorder) MimeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MimeType", reflect.TypeOf((*MockOutboundDescriptor)(nil).MimeType))
}

// Name mocks base method.
func (m *MockOutboundDescriptor) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockOutboundDescriptorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockOutboundDescriptor)(nil).Name))
}
