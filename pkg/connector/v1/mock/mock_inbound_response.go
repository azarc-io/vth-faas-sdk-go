// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1 (interfaces: InboundResponse)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connectorv1 "github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockInboundResponse is a mock of InboundResponse interface.
type MockInboundResponse struct {
	ctrl     *gomock.Controller
	recorder *MockInboundResponseMockRecorder
}

// MockInboundResponseMockRecorder is the mock recorder for MockInboundResponse.
type MockInboundResponseMockRecorder struct {
	mock *MockInboundResponse
}

// NewMockInboundResponse creates a new mock instance.
func NewMockInboundResponse(ctrl *gomock.Controller) *MockInboundResponse {
	mock := &MockInboundResponse{ctrl: ctrl}
	mock.recorder = &MockInboundResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInboundResponse) EXPECT() *MockInboundResponseMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockInboundResponse) Body() connectorv1.Bindable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].(connectorv1.Bindable)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockInboundResponseMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockInboundResponse)(nil).Body))
}

// Headers mocks base method.
func (m *MockInboundResponse) Headers() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockInboundResponseMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockInboundResponse)(nil).Headers))
}
