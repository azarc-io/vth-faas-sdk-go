// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1 (interfaces: Bindable)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBindable is a mock of Bindable interface.
type MockBindable struct {
	ctrl     *gomock.Controller
	recorder *MockBindableMockRecorder
}

// MockBindableMockRecorder is the mock recorder for MockBindable.
type MockBindableMockRecorder struct {
	mock *MockBindable
}

// NewMockBindable creates a new mock instance.
func NewMockBindable(ctrl *gomock.Controller) *MockBindable {
	mock := &MockBindable{ctrl: ctrl}
	mock.recorder = &MockBindableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBindable) EXPECT() *MockBindableMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockBindable) Bind(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockBindableMockRecorder) Bind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockBindable)(nil).Bind), arg0)
}

// Raw mocks base method.
func (m *MockBindable) Raw() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockBindableMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockBindable)(nil).Raw))
}
