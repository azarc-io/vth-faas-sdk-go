// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1 (interfaces: StopContext)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connectorv1 "github.com/azarc-io/vth-faas-sdk-go/pkg/connector/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockStopContext is a mock of StopContext interface.
type MockStopContext struct {
	ctrl     *gomock.Controller
	recorder *MockStopContextMockRecorder
}

// MockStopContextMockRecorder is the mock recorder for MockStopContext.
type MockStopContextMockRecorder struct {
	mock *MockStopContext
}

// NewMockStopContext creates a new mock instance.
func NewMockStopContext(ctrl *gomock.Controller) *MockStopContext {
	mock := &MockStopContext{ctrl: ctrl}
	mock.recorder = &MockStopContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStopContext) EXPECT() *MockStopContextMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockStopContext) Log() connectorv1.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(connectorv1.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockStopContextMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockStopContext)(nil).Log))
}
