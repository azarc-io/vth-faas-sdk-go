# Displayed in the UI and Marketplace
label: Complex Example
# Displayed in the UI and Marketplace
description: This example shows how you can consume data from inputs and use outputs to produce new data
# Input mappings
# these will be displayed to the user in the Verathread UI and will allow the user to map data from the blackboard
# to these inputs
inputs:
  # The name of the message
  name:
    # The label that will be displayed in the UI
    label: Hello, <Name>
    # The type of input, basic types are supported (string, boolean, number, object)
    type: string
    # Mime type is ignored for anything other than type: object
    # an input can support more than 1 mimetype, but it is up to you to include the relevant tags on your struct
    mime_types: [ ]
    # You can provide a schema that can perform up to 3 requirements in the verathread UI
    # - It lets the user know what the model you expect as your input to look like
    # - It can be used to transform data between different formats like xml -> json and back if you use our extended schema
    # - It can be used to validate the input before it is sent to your spark
    schema: "test-schema1.json"
    # - If true then the UI will not allow the spark to be updated unless this input has been mapped
    required: true
    # Conditions allow you to hide or show an input based on any value that the user can configure in the
    # Verathread UI when a config.schema file is provided.
    # E.g. if you had a schema that renders a form who's output looks like {"someObject": { "someKey": "someValue" }
    # then you can configure the condition below to only show this input when someKey == someValue
    condition: config.someObject.someKey == "someValue"
# Output mappings (for a more complete example see the advanced example)
# these will be displayed to the user in the Verathread UI and will allow the user to map your outputs
# to the blackboard
outputs:
  message:
    # The label that will be displayed in the UI
    label: Formatted Message
    # The type of input, basic types are supported (string, boolean, number, object)
    type: string
    # Mime type is ignored for anything other than type: object
    # you can only have 1 mime type on an output, this lets us inform the user of what to expect when they
    # consume this output, leave this empty for anything other than type: object
    mime_type: "application/json"
    # You can provide a schema that can perform up to 3 requirements in the verathread UI
    # - It lets the user know what the model you will produce as your output looks like
    # - It can be used to transform data between different formats like xml -> json and back if you use our extended schema
    # - It can be used to validate the output before it gets stored to the workflows blackboard
    schema: "test-schema1.json"
    # Conditions allow you to hide or show an input based on any value that the user can configure in the
    # Verathread UI when a config.schema file is provided.
    # E.g. if you had a schema that renders a form who's output looks like {"someObject": { "someKey": "someValue" }
    # then you can configure the condition below to only show this input when someKey == someValue
    condition: config.someObject.someKey == "someValue"
# Configuration required by this spark
config:
  # The ui will render a form using this schema which will provide you with static configuration that can be
  # changed by the user through the Verathread UI
  schema: ""
  # Options below are only for local development, they will differ when deployed through Verathread
  health: # the health port, enabled when deployed by verathread to monitor the health of the spark
    enabled: false
    bind: 0.0.0.0
    port: 8081
  agent: # the configuration required to communicate with the verathread agent
    host: 127.0.0.1
    port: 8031
    retryBackoff: 1s
    maxRetries: 20
  server: # the port to expose the modules api on, this allows the agent to communicate with the spark
    bind: 0.0.0.0
    port: 8080
    enabled: true
  logging: # log level for both the sdk and developer
    level: "info"
