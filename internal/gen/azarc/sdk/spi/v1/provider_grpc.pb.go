// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package spiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeploymentAdapterServiceClient is the client API for DeploymentAdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentAdapterServiceClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	GetSparks(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error)
	GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*GetPodsResponse, error)
	DeploySpark(ctx context.Context, in *DeploySparkRequest, opts ...grpc.CallOption) (*DeploySparkResponse, error)
	UndeploySpark(ctx context.Context, in *UndeploySparkRequest, opts ...grpc.CallOption) (*UndeploySparkResponse, error)
	GetSpark(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error)
	ScaleSpark(ctx context.Context, in *ScaleSparkRequest, opts ...grpc.CallOption) (*ScaleSparkResponse, error)
	GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error)
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	ReplaceSecret(ctx context.Context, in *ReplaceSecretRequest, opts ...grpc.CallOption) (*ReplaceSecretResponse, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	CreateEventStream(ctx context.Context, in *CreateEventStreamRequest, opts ...grpc.CallOption) (DeploymentAdapterService_CreateEventStreamClient, error)
}

type deploymentAdapterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentAdapterServiceClient(cc grpc.ClientConnInterface) DeploymentAdapterServiceClient {
	return &deploymentAdapterServiceClient{cc}
}

func (c *deploymentAdapterServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) GetSparks(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error) {
	out := new(GetFunctionsResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/GetSparks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*GetPodsResponse, error) {
	out := new(GetPodsResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/GetPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) DeploySpark(ctx context.Context, in *DeploySparkRequest, opts ...grpc.CallOption) (*DeploySparkResponse, error) {
	out := new(DeploySparkResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/DeploySpark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) UndeploySpark(ctx context.Context, in *UndeploySparkRequest, opts ...grpc.CallOption) (*UndeploySparkResponse, error) {
	out := new(UndeploySparkResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/UndeploySpark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) GetSpark(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error) {
	out := new(GetFunctionResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/GetSpark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) ScaleSpark(ctx context.Context, in *ScaleSparkRequest, opts ...grpc.CallOption) (*ScaleSparkResponse, error) {
	out := new(ScaleSparkResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/ScaleSpark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error) {
	out := new(GetSecretsResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/GetSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) ReplaceSecret(ctx context.Context, in *ReplaceSecretRequest, opts ...grpc.CallOption) (*ReplaceSecretResponse, error) {
	out := new(ReplaceSecretResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/ReplaceSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, "/sdk.spi.v1.DeploymentAdapterService/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentAdapterServiceClient) CreateEventStream(ctx context.Context, in *CreateEventStreamRequest, opts ...grpc.CallOption) (DeploymentAdapterService_CreateEventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeploymentAdapterService_ServiceDesc.Streams[0], "/sdk.spi.v1.DeploymentAdapterService/CreateEventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentAdapterServiceCreateEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeploymentAdapterService_CreateEventStreamClient interface {
	Recv() (*StreamEvent, error)
	grpc.ClientStream
}

type deploymentAdapterServiceCreateEventStreamClient struct {
	grpc.ClientStream
}

func (x *deploymentAdapterServiceCreateEventStreamClient) Recv() (*StreamEvent, error) {
	m := new(StreamEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeploymentAdapterServiceServer is the server API for DeploymentAdapterService service.
// All implementations should embed UnimplementedDeploymentAdapterServiceServer
// for forward compatibility
type DeploymentAdapterServiceServer interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	GetSparks(context.Context, *GetFunctionsRequest) (*GetFunctionsResponse, error)
	GetPods(context.Context, *GetPodsRequest) (*GetPodsResponse, error)
	DeploySpark(context.Context, *DeploySparkRequest) (*DeploySparkResponse, error)
	UndeploySpark(context.Context, *UndeploySparkRequest) (*UndeploySparkResponse, error)
	GetSpark(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error)
	ScaleSpark(context.Context, *ScaleSparkRequest) (*ScaleSparkResponse, error)
	GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error)
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	ReplaceSecret(context.Context, *ReplaceSecretRequest) (*ReplaceSecretResponse, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	CreateEventStream(*CreateEventStreamRequest, DeploymentAdapterService_CreateEventStreamServer) error
}

// UnimplementedDeploymentAdapterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeploymentAdapterServiceServer struct {
}

func (UnimplementedDeploymentAdapterServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) GetSparks(context.Context, *GetFunctionsRequest) (*GetFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSparks not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) GetPods(context.Context, *GetPodsRequest) (*GetPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) DeploySpark(context.Context, *DeploySparkRequest) (*DeploySparkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploySpark not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) UndeploySpark(context.Context, *UndeploySparkRequest) (*UndeploySparkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeploySpark not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) GetSpark(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpark not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) ScaleSpark(context.Context, *ScaleSparkRequest) (*ScaleSparkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleSpark not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecrets not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) ReplaceSecret(context.Context, *ReplaceSecretRequest) (*ReplaceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceSecret not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedDeploymentAdapterServiceServer) CreateEventStream(*CreateEventStreamRequest, DeploymentAdapterService_CreateEventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateEventStream not implemented")
}

// UnsafeDeploymentAdapterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentAdapterServiceServer will
// result in compilation errors.
type UnsafeDeploymentAdapterServiceServer interface {
	mustEmbedUnimplementedDeploymentAdapterServiceServer()
}

func RegisterDeploymentAdapterServiceServer(s grpc.ServiceRegistrar, srv DeploymentAdapterServiceServer) {
	s.RegisterService(&DeploymentAdapterService_ServiceDesc, srv)
}

func _DeploymentAdapterService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_GetSparks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).GetSparks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/GetSparks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).GetSparks(ctx, req.(*GetFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/GetPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).GetPods(ctx, req.(*GetPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_DeploySpark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploySparkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).DeploySpark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/DeploySpark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).DeploySpark(ctx, req.(*DeploySparkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_UndeploySpark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeploySparkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).UndeploySpark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/UndeploySpark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).UndeploySpark(ctx, req.(*UndeploySparkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_GetSpark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).GetSpark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/GetSpark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).GetSpark(ctx, req.(*GetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_ScaleSpark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleSparkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).ScaleSpark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/ScaleSpark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).ScaleSpark(ctx, req.(*ScaleSparkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_GetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).GetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/GetSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).GetSecrets(ctx, req.(*GetSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_ReplaceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).ReplaceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/ReplaceSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).ReplaceSecret(ctx, req.(*ReplaceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentAdapterServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spi.v1.DeploymentAdapterService/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentAdapterServiceServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentAdapterService_CreateEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateEventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentAdapterServiceServer).CreateEventStream(m, &deploymentAdapterServiceCreateEventStreamServer{stream})
}

type DeploymentAdapterService_CreateEventStreamServer interface {
	Send(*StreamEvent) error
	grpc.ServerStream
}

type deploymentAdapterServiceCreateEventStreamServer struct {
	grpc.ServerStream
}

func (x *deploymentAdapterServiceCreateEventStreamServer) Send(m *StreamEvent) error {
	return x.ServerStream.SendMsg(m)
}

// DeploymentAdapterService_ServiceDesc is the grpc.ServiceDesc for DeploymentAdapterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentAdapterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.spi.v1.DeploymentAdapterService",
	HandlerType: (*DeploymentAdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _DeploymentAdapterService_CreateNamespace_Handler,
		},
		{
			MethodName: "GetSparks",
			Handler:    _DeploymentAdapterService_GetSparks_Handler,
		},
		{
			MethodName: "GetPods",
			Handler:    _DeploymentAdapterService_GetPods_Handler,
		},
		{
			MethodName: "DeploySpark",
			Handler:    _DeploymentAdapterService_DeploySpark_Handler,
		},
		{
			MethodName: "UndeploySpark",
			Handler:    _DeploymentAdapterService_UndeploySpark_Handler,
		},
		{
			MethodName: "GetSpark",
			Handler:    _DeploymentAdapterService_GetSpark_Handler,
		},
		{
			MethodName: "ScaleSpark",
			Handler:    _DeploymentAdapterService_ScaleSpark_Handler,
		},
		{
			MethodName: "GetSecrets",
			Handler:    _DeploymentAdapterService_GetSecrets_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _DeploymentAdapterService_CreateSecret_Handler,
		},
		{
			MethodName: "ReplaceSecret",
			Handler:    _DeploymentAdapterService_ReplaceSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _DeploymentAdapterService_DeleteSecret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateEventStream",
			Handler:       _DeploymentAdapterService_CreateEventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "azarc/sdk/spi/v1/provider.proto",
}
