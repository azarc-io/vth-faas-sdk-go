// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sparkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	ExecuteJob(ctx context.Context, in *ExecuteJobRequest, opts ...grpc.CallOption) (*Void, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) ExecuteJob(ctx context.Context, in *ExecuteJobRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.AgentService/ExecuteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations should embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	ExecuteJob(context.Context, *ExecuteJobRequest) (*Void, error)
}

// UnimplementedAgentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) ExecuteJob(context.Context, *ExecuteJobRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteJob not implemented")
}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_ExecuteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ExecuteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.AgentService/ExecuteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ExecuteJob(ctx, req.(*ExecuteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.spark.v1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteJob",
			Handler:    _AgentService_ExecuteJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "azarc/sdk/spark/v1/spark.proto",
}

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerServiceClient interface {
	GetStageStatus(ctx context.Context, in *GetStageStatusRequest, opts ...grpc.CallOption) (*GetStageStatusResponse, error)
	SetStageStatus(ctx context.Context, in *SetStageStatusRequest, opts ...grpc.CallOption) (*Void, error)
	GetStageResult(ctx context.Context, in *GetStageResultRequest, opts ...grpc.CallOption) (*GetStageResultResponse, error)
	SetStageResult(ctx context.Context, in *SetStageResultRequest, opts ...grpc.CallOption) (*Void, error)
	GetInputs(ctx context.Context, in *GetInputsRequest, opts ...grpc.CallOption) (*GetInputsResponse, error)
	SetOutputs(ctx context.Context, in *SetOutputsRequest, opts ...grpc.CallOption) (*Void, error)
	SyncOutputs(ctx context.Context, in *SyncOutputsRequest, opts ...grpc.CallOption) (*Void, error)
	JobStarting(ctx context.Context, in *JobStartingRequest, opts ...grpc.CallOption) (*Void, error)
	FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*Void, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) GetStageStatus(ctx context.Context, in *GetStageStatusRequest, opts ...grpc.CallOption) (*GetStageStatusResponse, error) {
	out := new(GetStageStatusResponse)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/GetStageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SetStageStatus(ctx context.Context, in *SetStageStatusRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/SetStageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetStageResult(ctx context.Context, in *GetStageResultRequest, opts ...grpc.CallOption) (*GetStageResultResponse, error) {
	out := new(GetStageResultResponse)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/GetStageResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SetStageResult(ctx context.Context, in *SetStageResultRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/SetStageResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetInputs(ctx context.Context, in *GetInputsRequest, opts ...grpc.CallOption) (*GetInputsResponse, error) {
	out := new(GetInputsResponse)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/GetInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SetOutputs(ctx context.Context, in *SetOutputsRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/SetOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SyncOutputs(ctx context.Context, in *SyncOutputsRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/SyncOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) JobStarting(ctx context.Context, in *JobStartingRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/JobStarting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) FinishJob(ctx context.Context, in *FinishJobRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/sdk.spark.v1.ManagerService/FinishJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
// All implementations should embed UnimplementedManagerServiceServer
// for forward compatibility
type ManagerServiceServer interface {
	GetStageStatus(context.Context, *GetStageStatusRequest) (*GetStageStatusResponse, error)
	SetStageStatus(context.Context, *SetStageStatusRequest) (*Void, error)
	GetStageResult(context.Context, *GetStageResultRequest) (*GetStageResultResponse, error)
	SetStageResult(context.Context, *SetStageResultRequest) (*Void, error)
	GetInputs(context.Context, *GetInputsRequest) (*GetInputsResponse, error)
	SetOutputs(context.Context, *SetOutputsRequest) (*Void, error)
	SyncOutputs(context.Context, *SyncOutputsRequest) (*Void, error)
	JobStarting(context.Context, *JobStartingRequest) (*Void, error)
	FinishJob(context.Context, *FinishJobRequest) (*Void, error)
}

// UnimplementedManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (UnimplementedManagerServiceServer) GetStageStatus(context.Context, *GetStageStatusRequest) (*GetStageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStageStatus not implemented")
}
func (UnimplementedManagerServiceServer) SetStageStatus(context.Context, *SetStageStatusRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStageStatus not implemented")
}
func (UnimplementedManagerServiceServer) GetStageResult(context.Context, *GetStageResultRequest) (*GetStageResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStageResult not implemented")
}
func (UnimplementedManagerServiceServer) SetStageResult(context.Context, *SetStageResultRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStageResult not implemented")
}
func (UnimplementedManagerServiceServer) GetInputs(context.Context, *GetInputsRequest) (*GetInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputs not implemented")
}
func (UnimplementedManagerServiceServer) SetOutputs(context.Context, *SetOutputsRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOutputs not implemented")
}
func (UnimplementedManagerServiceServer) SyncOutputs(context.Context, *SyncOutputsRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOutputs not implemented")
}
func (UnimplementedManagerServiceServer) JobStarting(context.Context, *JobStartingRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStarting not implemented")
}
func (UnimplementedManagerServiceServer) FinishJob(context.Context, *FinishJobRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishJob not implemented")
}

// UnsafeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServiceServer will
// result in compilation errors.
type UnsafeManagerServiceServer interface {
	mustEmbedUnimplementedManagerServiceServer()
}

func RegisterManagerServiceServer(s grpc.ServiceRegistrar, srv ManagerServiceServer) {
	s.RegisterService(&ManagerService_ServiceDesc, srv)
}

func _ManagerService_GetStageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetStageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/GetStageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetStageStatus(ctx, req.(*GetStageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SetStageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SetStageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/SetStageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SetStageStatus(ctx, req.(*SetStageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetStageResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStageResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetStageResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/GetStageResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetStageResult(ctx, req.(*GetStageResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SetStageResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStageResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SetStageResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/SetStageResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SetStageResult(ctx, req.(*SetStageResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/GetInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetInputs(ctx, req.(*GetInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SetOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SetOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/SetOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SetOutputs(ctx, req.(*SetOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SyncOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SyncOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/SyncOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SyncOutputs(ctx, req.(*SyncOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_JobStarting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).JobStarting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/JobStarting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).JobStarting(ctx, req.(*JobStartingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).FinishJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.spark.v1.ManagerService/FinishJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).FinishJob(ctx, req.(*FinishJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerService_ServiceDesc is the grpc.ServiceDesc for ManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.spark.v1.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStageStatus",
			Handler:    _ManagerService_GetStageStatus_Handler,
		},
		{
			MethodName: "SetStageStatus",
			Handler:    _ManagerService_SetStageStatus_Handler,
		},
		{
			MethodName: "GetStageResult",
			Handler:    _ManagerService_GetStageResult_Handler,
		},
		{
			MethodName: "SetStageResult",
			Handler:    _ManagerService_SetStageResult_Handler,
		},
		{
			MethodName: "GetInputs",
			Handler:    _ManagerService_GetInputs_Handler,
		},
		{
			MethodName: "SetOutputs",
			Handler:    _ManagerService_SetOutputs_Handler,
		},
		{
			MethodName: "SyncOutputs",
			Handler:    _ManagerService_SyncOutputs_Handler,
		},
		{
			MethodName: "JobStarting",
			Handler:    _ManagerService_JobStarting_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _ManagerService_FinishJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "azarc/sdk/spark/v1/spark.proto",
}
