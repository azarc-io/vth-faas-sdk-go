// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: azarc/sdk/spark/v1/spark.proto

package sparkv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorType int32

const (
	ErrorType_ERROR_TYPE_FAILED_UNSPECIFIED ErrorType = 0
	ErrorType_ERROR_TYPE_CANCELLED          ErrorType = 1
	ErrorType_ERROR_TYPE_SKIP               ErrorType = 2
	ErrorType_ERROR_TYPE_RETRY              ErrorType = 3
	ErrorType_ERROR_TYPE_FATAL              ErrorType = 4
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_FAILED_UNSPECIFIED",
		1: "ERROR_TYPE_CANCELLED",
		2: "ERROR_TYPE_SKIP",
		3: "ERROR_TYPE_RETRY",
		4: "ERROR_TYPE_FATAL",
	}
	ErrorType_value = map[string]int32{
		"ERROR_TYPE_FAILED_UNSPECIFIED": 0,
		"ERROR_TYPE_CANCELLED":          1,
		"ERROR_TYPE_SKIP":               2,
		"ERROR_TYPE_RETRY":              3,
		"ERROR_TYPE_FATAL":              4,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_azarc_sdk_spark_v1_spark_proto_enumTypes[0].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_azarc_sdk_spark_v1_spark_proto_enumTypes[0]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{0}
}

type StageType int32

const (
	StageType_STANDARD   StageType = 0
	StageType_COMPENSATE StageType = 1
	StageType_CANCEL     StageType = 2
	StageType_COMPLETE   StageType = 3
)

// Enum value maps for StageType.
var (
	StageType_name = map[int32]string{
		0: "STANDARD",
		1: "COMPENSATE",
		2: "CANCEL",
		3: "COMPLETE",
	}
	StageType_value = map[string]int32{
		"STANDARD":   0,
		"COMPENSATE": 1,
		"CANCEL":     2,
		"COMPLETE":   3,
	}
)

func (x StageType) Enum() *StageType {
	p := new(StageType)
	*p = x
	return p
}

func (x StageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageType) Descriptor() protoreflect.EnumDescriptor {
	return file_azarc_sdk_spark_v1_spark_proto_enumTypes[1].Descriptor()
}

func (StageType) Type() protoreflect.EnumType {
	return &file_azarc_sdk_spark_v1_spark_proto_enumTypes[1]
}

func (x StageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageType.Descriptor instead.
func (StageType) EnumDescriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{1}
}

type StageStatus int32

const (
	StageStatus_STAGE_PENDING   StageStatus = 0
	StageStatus_STAGE_STARTED   StageStatus = 1
	StageStatus_STAGE_COMPLETED StageStatus = 2
	StageStatus_STAGE_FAILED    StageStatus = 3
	StageStatus_STAGE_SKIPPED   StageStatus = 4
	StageStatus_STAGE_CANCELED  StageStatus = 5
)

// Enum value maps for StageStatus.
var (
	StageStatus_name = map[int32]string{
		0: "STAGE_PENDING",
		1: "STAGE_STARTED",
		2: "STAGE_COMPLETED",
		3: "STAGE_FAILED",
		4: "STAGE_SKIPPED",
		5: "STAGE_CANCELED",
	}
	StageStatus_value = map[string]int32{
		"STAGE_PENDING":   0,
		"STAGE_STARTED":   1,
		"STAGE_COMPLETED": 2,
		"STAGE_FAILED":    3,
		"STAGE_SKIPPED":   4,
		"STAGE_CANCELED":  5,
	}
)

func (x StageStatus) Enum() *StageStatus {
	p := new(StageStatus)
	*p = x
	return p
}

func (x StageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_azarc_sdk_spark_v1_spark_proto_enumTypes[2].Descriptor()
}

func (StageStatus) Type() protoreflect.EnumType {
	return &file_azarc_sdk_spark_v1_spark_proto_enumTypes[2]
}

func (x StageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageStatus.Descriptor instead.
func (StageStatus) EnumDescriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{2}
}

// TODO this should be moved
type JobStatus int32

const (
	JobStatus_STARTED              JobStatus = 0
	JobStatus_DONE                 JobStatus = 1
	JobStatus_FAILED               JobStatus = 2
	JobStatus_COMPENSATION_STARTED JobStatus = 3
	JobStatus_COMPENSATION_DONE    JobStatus = 4
	JobStatus_COMPENSATION_FAILED  JobStatus = 5
	JobStatus_COMPLETION_STARTED   JobStatus = 6
	JobStatus_COMPLETION_DONE      JobStatus = 7
	JobStatus_COMPLETION_FAILED    JobStatus = 8
	JobStatus_CANCELLATION_STARTED JobStatus = 9
	JobStatus_CANCELLATION_DONE    JobStatus = 10
	JobStatus_CANCELLATION_FAILED  JobStatus = 11
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0:  "STARTED",
		1:  "DONE",
		2:  "FAILED",
		3:  "COMPENSATION_STARTED",
		4:  "COMPENSATION_DONE",
		5:  "COMPENSATION_FAILED",
		6:  "COMPLETION_STARTED",
		7:  "COMPLETION_DONE",
		8:  "COMPLETION_FAILED",
		9:  "CANCELLATION_STARTED",
		10: "CANCELLATION_DONE",
		11: "CANCELLATION_FAILED",
	}
	JobStatus_value = map[string]int32{
		"STARTED":              0,
		"DONE":                 1,
		"FAILED":               2,
		"COMPENSATION_STARTED": 3,
		"COMPENSATION_DONE":    4,
		"COMPENSATION_FAILED":  5,
		"COMPLETION_STARTED":   6,
		"COMPLETION_DONE":      7,
		"COMPLETION_FAILED":    8,
		"CANCELLATION_STARTED": 9,
		"CANCELLATION_DONE":    10,
		"CANCELLATION_FAILED":  11,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_azarc_sdk_spark_v1_spark_proto_enumTypes[3].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_azarc_sdk_spark_v1_spark_proto_enumTypes[3]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{3}
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode uint32          `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorType ErrorType       `protobuf:"varint,3,opt,name=error_type,json=errorType,proto3,enum=sdk.spark.v1.ErrorType" json:"error_type,omitempty"`
	Metadata  *structpb.Value `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Retry     *RetryStrategy  `protobuf:"bytes,5,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Error) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *Error) GetErrorType() ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return ErrorType_ERROR_TYPE_FAILED_UNSPECIFIED
}

func (x *Error) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Error) GetRetry() *RetryStrategy {
	if x != nil {
		return x.Retry
	}
	return nil
}

type RetryStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backoff uint32 `protobuf:"varint,1,opt,name=backoff,proto3" json:"backoff,omitempty"`
	Count   uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RetryStrategy) Reset() {
	*x = RetryStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryStrategy) ProtoMessage() {}

func (x *RetryStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryStrategy.ProtoReflect.Descriptor instead.
func (*RetryStrategy) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{2}
}

func (x *RetryStrategy) GetBackoff() uint32 {
	if x != nil {
		return x.Backoff
	}
	return 0
}

func (x *RetryStrategy) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LastActiveStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status StageStatus `protobuf:"varint,2,opt,name=status,proto3,enum=sdk.spark.v1.StageStatus" json:"status,omitempty"`
}

func (x *LastActiveStage) Reset() {
	*x = LastActiveStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastActiveStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastActiveStage) ProtoMessage() {}

func (x *LastActiveStage) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastActiveStage.ProtoReflect.Descriptor instead.
func (*LastActiveStage) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{3}
}

func (x *LastActiveStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LastActiveStage) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_STAGE_PENDING
}

type ExecuteJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	TransactionId   string           `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CorrelationId   string           `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	LastActiveStage *LastActiveStage `protobuf:"bytes,4,opt,name=last_active_stage,json=lastActiveStage,proto3,oneof" json:"last_active_stage,omitempty"`
}

func (x *ExecuteJobRequest) Reset() {
	*x = ExecuteJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteJobRequest) ProtoMessage() {}

func (x *ExecuteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteJobRequest.ProtoReflect.Descriptor instead.
func (*ExecuteJobRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteJobRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExecuteJobRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ExecuteJobRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ExecuteJobRequest) GetLastActiveStage() *LastActiveStage {
	if x != nil {
		return x.LastActiveStage
	}
	return nil
}

type JobStartingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *JobStartingRequest) Reset() {
	*x = JobStartingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStartingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStartingRequest) ProtoMessage() {}

func (x *JobStartingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStartingRequest.ProtoReflect.Descriptor instead.
func (*JobStartingRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{5}
}

func (x *JobStartingRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JobStartingRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type FinishJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *FinishJobRequest) Reset() {
	*x = FinishJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishJobRequest) ProtoMessage() {}

func (x *FinishJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishJobRequest.ProtoReflect.Descriptor instead.
func (*FinishJobRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{6}
}

func (x *FinishJobRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SetStageStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key    string      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Depth  uint32      `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	Type   StageType   `protobuf:"varint,4,opt,name=type,proto3,enum=sdk.spark.v1.StageType" json:"type,omitempty"`
	Status StageStatus `protobuf:"varint,5,opt,name=status,proto3,enum=sdk.spark.v1.StageStatus" json:"status,omitempty"`
	Err    *Error      `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *SetStageStatusRequest) Reset() {
	*x = SetStageStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStageStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStageStatusRequest) ProtoMessage() {}

func (x *SetStageStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStageStatusRequest.ProtoReflect.Descriptor instead.
func (*SetStageStatusRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{7}
}

func (x *SetStageStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetStageStatusRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetStageStatusRequest) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *SetStageStatusRequest) GetType() StageType {
	if x != nil {
		return x.Type
	}
	return StageType_STANDARD
}

func (x *SetStageStatusRequest) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_STAGE_PENDING
}

func (x *SetStageStatusRequest) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type GetStageResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetStageResultRequest) Reset() {
	*x = GetStageResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStageResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStageResultRequest) ProtoMessage() {}

func (x *GetStageResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStageResultRequest.ProtoReflect.Descriptor instead.
func (*GetStageResultRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{8}
}

func (x *GetStageResultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetStageResultRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetStageResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStageResultResponse) Reset() {
	*x = GetStageResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStageResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStageResultResponse) ProtoMessage() {}

func (x *GetStageResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStageResultResponse.ProtoReflect.Descriptor instead.
func (*GetStageResultResponse) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{9}
}

func (x *GetStageResultResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetStageResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetStageResultRequest) Reset() {
	*x = SetStageResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStageResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStageResultRequest) ProtoMessage() {}

func (x *SetStageResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStageResultRequest.ProtoReflect.Descriptor instead.
func (*SetStageResultRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{10}
}

func (x *SetStageResultRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetStageResultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetStageResultRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetStageStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetStageStatusRequest) Reset() {
	*x = GetStageStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStageStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStageStatusRequest) ProtoMessage() {}

func (x *GetStageStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStageStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStageStatusRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{11}
}

func (x *GetStageStatusRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetStageStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetStageStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StageStatus `protobuf:"varint,1,opt,name=status,proto3,enum=sdk.spark.v1.StageStatus" json:"status,omitempty"`
}

func (x *GetStageStatusResponse) Reset() {
	*x = GetStageStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStageStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStageStatusResponse) ProtoMessage() {}

func (x *GetStageStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStageStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStageStatusResponse) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{12}
}

func (x *GetStageStatusResponse) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_STAGE_PENDING
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MimeType string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{13}
}

func (x *Variable) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Variable) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type GetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *GetInputsRequest) Reset() {
	*x = GetInputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputsRequest) ProtoMessage() {}

func (x *GetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputsRequest.ProtoReflect.Descriptor instead.
func (*GetInputsRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{14}
}

func (x *GetInputsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetInputsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type GetInputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables map[string]*Variable `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInputsResponse) Reset() {
	*x = GetInputsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputsResponse) ProtoMessage() {}

func (x *GetInputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputsResponse.ProtoReflect.Descriptor instead.
func (*GetInputsResponse) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{15}
}

func (x *GetInputsResponse) GetVariables() map[string]*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type SetOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Variables map[string]*Variable `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetOutputsRequest) Reset() {
	*x = SetOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOutputsRequest) ProtoMessage() {}

func (x *SetOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOutputsRequest.ProtoReflect.Descriptor instead.
func (*SetOutputsRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{16}
}

func (x *SetOutputsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetOutputsRequest) GetVariables() map[string]*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type SyncOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SyncOutputsRequest) Reset() {
	*x = SyncOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOutputsRequest) ProtoMessage() {}

func (x *SyncOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_azarc_sdk_spark_v1_spark_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOutputsRequest.ProtoReflect.Descriptor instead.
func (*SyncOutputsRequest) Descriptor() ([]byte, []int) {
	return file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP(), []int{17}
}

func (x *SyncOutputsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_azarc_sdk_spark_v1_spark_proto protoreflect.FileDescriptor

var file_azarc_sdk_spark_v1_spark_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x7a, 0x61, 0x72, 0x63, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x48, 0x01, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x22, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9,
	0x01, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x12, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x24, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x51, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3b, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x54, 0x0a,
	0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x26, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x2a, 0x89, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x04, 0x2a, 0x43, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x86, 0x02, 0x0a,
	0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x45,
	0x4e, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x0b, 0x32, 0x51, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x12, 0x1f, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x32, 0xbc, 0x05, 0x0a, 0x0e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0b,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x42, 0xbd, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x70,
	0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x7a, 0x61, 0x72, 0x63, 0x2d, 0x69, 0x6f, 0x2f,
	0x76, 0x74, 0x68, 0x2d, 0x66, 0x61, 0x61, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x7a, 0x61,
	0x72, 0x63, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x3b,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0c,
	0x53, 0x64, 0x6b, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x53,
	0x64, 0x6b, 0x5c, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x53, 0x64,
	0x6b, 0x5c, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x53, 0x64, 0x6b, 0x3a, 0x3a, 0x53, 0x70,
	0x61, 0x72, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_azarc_sdk_spark_v1_spark_proto_rawDescOnce sync.Once
	file_azarc_sdk_spark_v1_spark_proto_rawDescData = file_azarc_sdk_spark_v1_spark_proto_rawDesc
)

func file_azarc_sdk_spark_v1_spark_proto_rawDescGZIP() []byte {
	file_azarc_sdk_spark_v1_spark_proto_rawDescOnce.Do(func() {
		file_azarc_sdk_spark_v1_spark_proto_rawDescData = protoimpl.X.CompressGZIP(file_azarc_sdk_spark_v1_spark_proto_rawDescData)
	})
	return file_azarc_sdk_spark_v1_spark_proto_rawDescData
}

var file_azarc_sdk_spark_v1_spark_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_azarc_sdk_spark_v1_spark_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_azarc_sdk_spark_v1_spark_proto_goTypes = []interface{}{
	(ErrorType)(0),                 // 0: sdk.spark.v1.ErrorType
	(StageType)(0),                 // 1: sdk.spark.v1.StageType
	(StageStatus)(0),               // 2: sdk.spark.v1.StageStatus
	(JobStatus)(0),                 // 3: sdk.spark.v1.JobStatus
	(*Void)(nil),                   // 4: sdk.spark.v1.Void
	(*Error)(nil),                  // 5: sdk.spark.v1.Error
	(*RetryStrategy)(nil),          // 6: sdk.spark.v1.RetryStrategy
	(*LastActiveStage)(nil),        // 7: sdk.spark.v1.LastActiveStage
	(*ExecuteJobRequest)(nil),      // 8: sdk.spark.v1.ExecuteJobRequest
	(*JobStartingRequest)(nil),     // 9: sdk.spark.v1.JobStartingRequest
	(*FinishJobRequest)(nil),       // 10: sdk.spark.v1.FinishJobRequest
	(*SetStageStatusRequest)(nil),  // 11: sdk.spark.v1.SetStageStatusRequest
	(*GetStageResultRequest)(nil),  // 12: sdk.spark.v1.GetStageResultRequest
	(*GetStageResultResponse)(nil), // 13: sdk.spark.v1.GetStageResultResponse
	(*SetStageResultRequest)(nil),  // 14: sdk.spark.v1.SetStageResultRequest
	(*GetStageStatusRequest)(nil),  // 15: sdk.spark.v1.GetStageStatusRequest
	(*GetStageStatusResponse)(nil), // 16: sdk.spark.v1.GetStageStatusResponse
	(*Variable)(nil),               // 17: sdk.spark.v1.Variable
	(*GetInputsRequest)(nil),       // 18: sdk.spark.v1.GetInputsRequest
	(*GetInputsResponse)(nil),      // 19: sdk.spark.v1.GetInputsResponse
	(*SetOutputsRequest)(nil),      // 20: sdk.spark.v1.SetOutputsRequest
	(*SyncOutputsRequest)(nil),     // 21: sdk.spark.v1.SyncOutputsRequest
	nil,                            // 22: sdk.spark.v1.GetInputsResponse.VariablesEntry
	nil,                            // 23: sdk.spark.v1.SetOutputsRequest.VariablesEntry
	(*structpb.Value)(nil),         // 24: google.protobuf.Value
}
var file_azarc_sdk_spark_v1_spark_proto_depIdxs = []int32{
	0,  // 0: sdk.spark.v1.Error.error_type:type_name -> sdk.spark.v1.ErrorType
	24, // 1: sdk.spark.v1.Error.metadata:type_name -> google.protobuf.Value
	6,  // 2: sdk.spark.v1.Error.retry:type_name -> sdk.spark.v1.RetryStrategy
	2,  // 3: sdk.spark.v1.LastActiveStage.status:type_name -> sdk.spark.v1.StageStatus
	7,  // 4: sdk.spark.v1.ExecuteJobRequest.last_active_stage:type_name -> sdk.spark.v1.LastActiveStage
	1,  // 5: sdk.spark.v1.SetStageStatusRequest.type:type_name -> sdk.spark.v1.StageType
	2,  // 6: sdk.spark.v1.SetStageStatusRequest.status:type_name -> sdk.spark.v1.StageStatus
	5,  // 7: sdk.spark.v1.SetStageStatusRequest.err:type_name -> sdk.spark.v1.Error
	2,  // 8: sdk.spark.v1.GetStageStatusResponse.status:type_name -> sdk.spark.v1.StageStatus
	22, // 9: sdk.spark.v1.GetInputsResponse.variables:type_name -> sdk.spark.v1.GetInputsResponse.VariablesEntry
	23, // 10: sdk.spark.v1.SetOutputsRequest.variables:type_name -> sdk.spark.v1.SetOutputsRequest.VariablesEntry
	17, // 11: sdk.spark.v1.GetInputsResponse.VariablesEntry.value:type_name -> sdk.spark.v1.Variable
	17, // 12: sdk.spark.v1.SetOutputsRequest.VariablesEntry.value:type_name -> sdk.spark.v1.Variable
	8,  // 13: sdk.spark.v1.AgentService.ExecuteJob:input_type -> sdk.spark.v1.ExecuteJobRequest
	15, // 14: sdk.spark.v1.ManagerService.GetStageStatus:input_type -> sdk.spark.v1.GetStageStatusRequest
	11, // 15: sdk.spark.v1.ManagerService.SetStageStatus:input_type -> sdk.spark.v1.SetStageStatusRequest
	12, // 16: sdk.spark.v1.ManagerService.GetStageResult:input_type -> sdk.spark.v1.GetStageResultRequest
	14, // 17: sdk.spark.v1.ManagerService.SetStageResult:input_type -> sdk.spark.v1.SetStageResultRequest
	18, // 18: sdk.spark.v1.ManagerService.GetInputs:input_type -> sdk.spark.v1.GetInputsRequest
	20, // 19: sdk.spark.v1.ManagerService.SetOutputs:input_type -> sdk.spark.v1.SetOutputsRequest
	21, // 20: sdk.spark.v1.ManagerService.SyncOutputs:input_type -> sdk.spark.v1.SyncOutputsRequest
	9,  // 21: sdk.spark.v1.ManagerService.JobStarting:input_type -> sdk.spark.v1.JobStartingRequest
	10, // 22: sdk.spark.v1.ManagerService.FinishJob:input_type -> sdk.spark.v1.FinishJobRequest
	4,  // 23: sdk.spark.v1.AgentService.ExecuteJob:output_type -> sdk.spark.v1.Void
	16, // 24: sdk.spark.v1.ManagerService.GetStageStatus:output_type -> sdk.spark.v1.GetStageStatusResponse
	4,  // 25: sdk.spark.v1.ManagerService.SetStageStatus:output_type -> sdk.spark.v1.Void
	13, // 26: sdk.spark.v1.ManagerService.GetStageResult:output_type -> sdk.spark.v1.GetStageResultResponse
	4,  // 27: sdk.spark.v1.ManagerService.SetStageResult:output_type -> sdk.spark.v1.Void
	19, // 28: sdk.spark.v1.ManagerService.GetInputs:output_type -> sdk.spark.v1.GetInputsResponse
	4,  // 29: sdk.spark.v1.ManagerService.SetOutputs:output_type -> sdk.spark.v1.Void
	4,  // 30: sdk.spark.v1.ManagerService.SyncOutputs:output_type -> sdk.spark.v1.Void
	4,  // 31: sdk.spark.v1.ManagerService.JobStarting:output_type -> sdk.spark.v1.Void
	4,  // 32: sdk.spark.v1.ManagerService.FinishJob:output_type -> sdk.spark.v1.Void
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_azarc_sdk_spark_v1_spark_proto_init() }
func file_azarc_sdk_spark_v1_spark_proto_init() {
	if File_azarc_sdk_spark_v1_spark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastActiveStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStartingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStageStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStageResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStageResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStageResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStageStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStageStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_azarc_sdk_spark_v1_spark_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_azarc_sdk_spark_v1_spark_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_azarc_sdk_spark_v1_spark_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_azarc_sdk_spark_v1_spark_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_azarc_sdk_spark_v1_spark_proto_goTypes,
		DependencyIndexes: file_azarc_sdk_spark_v1_spark_proto_depIdxs,
		EnumInfos:         file_azarc_sdk_spark_v1_spark_proto_enumTypes,
		MessageInfos:      file_azarc_sdk_spark_v1_spark_proto_msgTypes,
	}.Build()
	File_azarc_sdk_spark_v1_spark_proto = out.File
	file_azarc_sdk_spark_v1_spark_proto_rawDesc = nil
	file_azarc_sdk_spark_v1_spark_proto_goTypes = nil
	file_azarc_sdk_spark_v1_spark_proto_depIdxs = nil
}
